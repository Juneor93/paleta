{"version":3,"sources":["logo-paleta.png","components/header.js","components/footer.js","components/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","img","alt","type","placeholder","id","Footer","href","Api","state","paleta","fetch","then","res","json","colors","map","item","hex","filter","setState","content","this","length","style","backgroundColor","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,yC,6MCc5BC,EAXA,kBAEX,4BAAQC,UAAY,QAChB,yBAAKC,IAAMC,IAAKC,IAAI,SACpB,gDACA,0BAAMH,UAAU,aACZ,2BAAOI,KAAK,OAAOC,YAAY,2BAA2BC,GAAG,YCS1DC,EAhBA,kBAEX,4BAAQP,UAAU,UACd,yEACA,wBAAIA,UAAU,QACd,4BAAI,uBAAGQ,KAAK,oCAAR,iBACJ,4BAAI,uBAAGA,KAAK,8BAAR,mBACJ,4BAAI,uBAAGA,KAAK,+BAAR,oBACJ,4BAAI,uBAAGA,KAAK,+BAAR,kBACJ,4BAAI,uBAAGA,KAAK,+BAAR,uBACJ,4BAAI,uBAAGA,KAAK,oCAAR,wBCuBKC,E,4MAhCbC,MAAQ,CACJC,OAAQ,I,kEAGS,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,IAAMH,EAASG,EAAIE,OAAOC,KAAI,SAACC,GAAD,OAAUA,EAAKC,OAAKC,QAAQ,SAACF,GAAD,OAAUA,KACpE,EAAKG,SAAS,CAACV,gB,+BAKvB,IAAIW,EAAU,GASd,OAPiC,IAA7BC,KAAKb,MAAMC,OAAOa,SAClBF,EAAW,yBAAKtB,UAAU,aACrBuB,KAAKb,MAAMC,OAAOM,KAAI,SAAAC,GAAI,OACvB,yBAAKO,MAAO,CAACC,gBAAiB,IAAMR,IAAO,+BAAKA,SAKxD,yBAAMlB,UAAU,YACZ,yBAAKA,UAAU,YAClBsB,O,GA3BKK,IAAMC,WCgBTC,E,uKAVT,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANQ2B,IAAMC,WCMJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e17cef5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-paleta.93d0d6f2.png\";","import React from 'react';\nimport img from '../logo-paleta.png';\n\nconst Header = () =>(\n\n    <header className = \"head\">\n        <img src= {img} alt=\"logo\"></img>\n        <h1> Paleta de Cores</h1>\n        <form className=\"pesquisar\">\n            <input type=\"text\" placeholder=\"Pesquise uma cor aqui...\" id=\"pesq\"></input>\n        </form>\n    </header>\n);\n\nexport default Header;","import React from 'react';\n\nconst Footer = () => (\n\n    <footer className=\"rodape\">\n        <h2>Projeto Senai-API-React | Desenvolvedores</h2>\n        <ul className=\"devs\">\n        <li><a href=\"https://github.com/LuanTavares13\">Luan Tavares</a></li>\n        <li><a href=\"https://github.com/RachMor\">Raquel Moreira</a></li>\n        <li><a href=\"https://github.com/Juneor93\">Artur Nishiuchi</a></li>\n        <li><a href=\"https://github.com/Mmotta18\">Matheus Motta</a></li>\n        <li><a href=\"https://github.com/leoorodr\">Leonardo Rodrigues</a></li>\n        <li><a href=\"https://github.com/rosana-araujo\">Rosana Ara√∫jo</a></li>\n        </ul>\n    </footer>\n\n);\n\nexport default Footer;","import React from 'react';\n\nclass Api extends React.Component {\n    state = {\n        paleta: []\n    };\n  \n    componentDidMount() {\n        fetch('https://www.colr.org/json/colors/random/65')\n            .then(res => res.json())\n            .then(res => {\n                const paleta = res.colors.map((item) => item.hex).filter( (item) => item) \n                this.setState({paleta});\n            });\n    }\n  \n    render() {\n        let content = '' ;\n  \n        if (this.state.paleta.length !== 0) {\n            content = (<div className=\"container\">\n                {this.state.paleta.map(item => (\n                    <div style={{backgroundColor: \"#\" + item}}><p>#{item}</p></div>\n                ))}\n                </div>)\n        }\n        return (\n            <div  className=\"conteudo\">\n                <div className=\"lateral\"></div>\n            {content}\n            </div>\n        );\n    }\n  }\n  \n  export default Api;","import React from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Api from './components/api';\n\nclass App extends React.Component {\n    render() {\n      return (\n        <div className=\"App\">\n          <Header/>\n          <Api/>\n          <Footer/>\n        </div>\n      );\n    }\n  }\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}